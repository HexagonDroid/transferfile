name: Build iOS WebView IPA

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Website URL to open'
        required: true
        default: 'https://example.com'

jobs:
  build-ipa:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup WebViewApp and write files
        run: |
          mkdir WebViewApp && cd WebViewApp

          # Write Info.plist
          cat > Info.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
           "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleIdentifier</key>
            <string>com.github.webviewwrapper</string>
            <key>CFBundleExecutable</key>
            <string>WebViewApp</string>
            <key>CFBundleName</key>
            <string>WebViewApp</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>UILaunchStoryboardName</key>
            <string>LaunchScreen</string>
            <key>UIRequiresFullScreen</key>
            <true/>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSRequiresIPhoneOS</key>
            <true/>
            <key>MinimumOSVersion</key>
            <string>12.0</string>
            <key>NSAppTransportSecurity</key>
            <dict>
              <key>NSAllowsArbitraryLoads</key>
              <true/>
            </dict>
          </dict>
          </plist>
          EOF

          # Write main.swift with URL placeholder
          cat > main.swift <<EOF
          import UIKit
          import WebKit

          class ViewController: UIViewController, WKNavigationDelegate {
              override func loadView() {
                  let webView = WKWebView()
                  webView.navigationDelegate = self
                  self.view = webView
              }

              override func viewDidLoad() {
                  super.viewDidLoad()
                  if let webView = self.view as? WKWebView {
                      let urlString = "__URL_PLACEHOLDER__"
                      guard let url = URL(string: urlString) else {
                          fatalError("Invalid URL string")
                      }
                      webView.load(URLRequest(url: url))
                      webView.allowsBackForwardNavigationGestures = true
                  }
              }

              func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction,
                           decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
                  decisionHandler(.allow)
              }
          }

          class AppDelegate: UIResponder, UIApplicationDelegate {
              var window: UIWindow?

              func application(_ application: UIApplication,
                               didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
                  window = UIWindow()
                  window?.rootViewController = ViewController()
                  window?.makeKeyAndVisible()
                  return true
              }
          }

          UIApplicationMain(CommandLine.argc, CommandLine.unsafeArgv, nil, NSStringFromClass(AppDelegate.self))
          EOF
          
      - name: Inject URL into Swift source
        run: |
          cd WebViewApp
          URL_ESCAPED="${{ github.event.inputs.url//\//\\/ }}"
          sed -i '' "s/__URL_PLACEHOLDER__/${URL_ESCAPED}/g" main.swift

      - name: Build and ad-hoc sign IPA
        run: |
          cd WebViewApp
          mkdir Payload
          mkdir -p WebViewApp.app

          xcrun -sdk iphoneos swiftc -target arm64-apple-ios12.0 \
            -import-objc-header /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/UIKit.framework/Headers/UIKit.h \
            -framework UIKit -framework WebKit -emit-executable main.swift -o WebViewApp.app/WebViewApp

          cp Info.plist WebViewApp.app/

          cat > entitlements.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict></dict></plist>
          EOF

          codesign -s - --force --entitlements entitlements.plist WebViewApp.app

          mv WebViewApp.app Payload/

          zip -r WebViewApp.ipa Payload

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: WebViewApp
          path: WebViewApp/WebViewApp.ipa
